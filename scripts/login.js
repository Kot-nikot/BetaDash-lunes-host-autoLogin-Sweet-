// scripts/login.js
import { chromium } from '@playwright/test';
import fs from 'fs';

const LOGIN_URL = 'https://ctrl.lunes.host/auth/login';

// Telegram ÈÄöÁü•
async function notifyTelegram({ ok, stage, msg, screenshotPath }) {
  try {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    const chatId = process.env.TELEGRAM_CHAT_ID;
    if (!token || !chatId) {
      console.log('[WARN] TELEGRAM_BOT_TOKEN Êàñ TELEGRAM_CHAT_ID –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æÔºå—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ');
      return;
    }

    const text = [
      `üîî Lunes –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—èÔºö${ok ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –ù–µ—É–¥–∞—á–Ω–æ'}`,
      `–≠—Ç–∞–øÔºö${stage}`,
      msg ? `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èÔºö${msg}` : '',
      `–í—Ä–µ–º—èÔºö${new Date().toISOString()}`
    ].filter(Boolean).join('\n');

    await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
      method: 'POST',
      headers: { 'content-type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text,
        disable_web_page_preview: true
      })
    });

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç, –ø—Ä–∏—Å—ã–ª–∞–µ–º –µ–≥–æ
    if (screenshotPath && fs.existsSync(screenshotPath)) {
      const photoUrl = `https://api.telegram.org/bot${token}/sendPhoto`;
      const form = new FormData();
      form.append('chat_id', chatId);
      form.append('caption', `Lunes –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞Ôºà${stage}Ôºâ`);
      form.append('photo', new Blob([fs.readFileSync(screenshotPath)]), 'screenshot.png');
      await fetch(photoUrl, { method: 'POST', body: form });
    }
  } catch (e) {
    console.log('[WARN] Telegram —Å–±–æ–πÔºö', e.message);
  }
}

function envOrThrow(name) {
  const v = process.env[name];
  if (!v) throw new Error(`–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ${name} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`);
  return v;
}

async function main() {
  const username = envOrThrow('LUNES_USERNAME');
  const password = envOrThrow('LUNES_PASSWORD');

  const browser = await chromium.launch({
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });

  const context = await browser.newContext({ viewport: { width: 1366, height: 768 } });
  const page = await context.newPage();

  const screenshot = (name) => `./${name}.png`;

  try {
    // 1) –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
    await page.goto(LOGIN_URL, { waitUntil: 'domcontentloaded', timeout: 60_000 });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ CAPCHI
    const humanCheckText = await page.locator('text=/Verify you are human|–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ | –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏|review the security/i').first();
    if (await humanCheckText.count()) {
      const sp = screenshot('01-human-check');
      await page.screenshot({ path: sp, fullPage: true });
      await notifyTelegram({ ok: false, stage: '–û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Ö–æ–¥–∞', msg: '–û–Ω–∞—Ä—É–∑–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–æ—Ç–∞', screenshotPath: sp });
      process.exitCode = 2;
      return;
    }

    // 2) –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–Ω–ª—è
    const userInput = page.locator('input[name="username"]');
    const passInput = page.locator('input[name="password"]');
    await userInput.waitFor({ state: 'visible', timeout: 30_000 });
    await passInput.waitFor({ state: 'visible', timeout: 30_000 });

    await userInput.fill(username);
    await passInput.fill(password);

    const loginBtn = page.locator('button[type="submit"]');
    await loginBtn.waitFor({ state: 'visible', timeout: 15_000 });

    const spBefore = screenshot('02-before-submit');
    await page.screenshot({ path: spBefore, fullPage: true });

    await Promise.all([
      page.waitForLoadState('networkidle', { timeout: 30_000 }).catch(() => {}),
      loginBtn.click({ timeout: 10_000 })
    ]);

    // 3) –°–∫—Ä–∏–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const spAfter = screenshot('03-after-submit');
    await page.screenshot({ path: spAfter, fullPage: true });

    const url = page.url();
    const successHint = await page.locator('text=/Dashboard|Logout|Sign out|–ö–æ–Ω—Å–æ–ª—å | –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è/i').first().count();
    const stillOnLogin = /\/auth\/login/i.test(url);

    if (!stillOnLogin || successHint > 0) {
      await notifyTelegram({ ok: true, stage: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ', msg: `–¢–µ–∫—É—â–∏–π URLÔºö${url}`, screenshotPath: spAfter });

      // **–í—Ö–æ–¥ –≤ –¥–µ—Ç–∞–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞**
      const serverLink = page.locator('a[href="/server/5202fe13"]');
      await serverLink.waitFor({ state: 'visible', timeout: 20_000 });
      await serverLink.click({ timeout: 10_000 });

      await page.waitForLoadState('networkidle', { timeout: 30_000 });
      const spServer = screenshot('04-server-page');
      await page.screenshot({ path: spServer, fullPage: true });
      await notifyTelegram({ ok: true, stage: '–í—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–µ—Ä–≤–µ—Ä–∞', msg: '–°–≤–µ–¥–µ–Ω–∏—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã', screenshotPath: spServer });

      // **–ù–∞–∂–∏–º–∞–µ–º Console **
      const consoleMenu = page.locator('a[href="/server/5202fe13"].active');
      await consoleMenu.waitFor({ state: 'visible', timeout: 15_000 });
      await consoleMenu.click({ timeout: 5_000 });

      await page.waitForLoadState('networkidle', { timeout: 10_000 });

      // **–ñ–º–µ–º Restart**
      const restartBtn = page.locator('button:has-text("Restart")');
      await restartBtn.waitFor({ state: 'visible', timeout: 15_000 });
      await restartBtn.click();
      await notifyTelegram({ ok: true, stage: '–ù–∞–∂–º–∏—Ç–µ Restart', msg: '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ VPS' });

      // –ñ–¥–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É VPS  10 —Å–µ–∫Ôºâ
      await page.waitForTimeout(10000);

      // **–í–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–∞–∂–∞—Ç–∏–µ ENTER**
      const commandInput = page.locator('input[placeholder="Type a command..."]');
      await commandInput.waitFor({ state: 'visible', timeout: 20_000 });
      await commandInput.fill('working properly');
      await commandInput.press('Enter');

      // –û–∂–∏–¥–∞–Ω–∏–µ
      await page.waitForTimeout(5000);

      //—Å–∫—Ä–∏–Ω –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const spCommand = screenshot('05-command-executed');
      await page.screenshot({ path: spCommand, fullPage: true });
      await notifyTelegram({ ok: true, stage: '–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞', msg: 'restart.sh –≤—ã–ø–æ–ª–Ω–µ–Ω', screenshotPath: spCommand });

      process.exitCode = 0;
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤—Ö–æ–¥–∞
    const errorMsgNode = page.locator('text=/Invalid|incorrect|–û—à–∏–±–∫–∞|–°–±–æ–π| –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π/i');
    const hasError = await errorMsgNode.count();
    const errorMsg = hasError ? await errorMsgNode.first().innerText().catch(() => '') : '';
    await notifyTelegram({
      ok: false,
      stage: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏',
      msg: errorMsg ? `–ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ –Ω–µ —É–¥–∞—á—ÉÔºà${errorMsg}Ôºâ` : '–í—Å–µ –µ—â–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞',
      screenshotPath: spAfter
    });
    process.exitCode = 1;
  } catch (e) {
    const sp = screenshot('99-error');
    try { await page.screenshot({ path: sp, fullPage: true }); } catch {}
    await notifyTelegram({ ok: false, stage: '–ò—Å–∫–ª—é—á–µ–Ω–∏–µ', msg: e?.message || String(e), screenshotPath: fs.existsSync(sp) ? sp : undefined });
    process.exitCode = 1;
  } finally {
    await context.close();
    await browser.close();
  }
}

await main();
